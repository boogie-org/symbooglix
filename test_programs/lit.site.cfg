# -*- Python -*-

# Configuration file for the 'lit' test runner.

import os
import sys
import re
import platform

import lit.util
import lit.formats

# name: The name of this test suite.
config.name = 'Symbooglix driver'

config.test_format = lit.formats.ShTest(execute_external=False)

# suffixes: A list of file extensions to treat as test files. This is overriden
# by individual lit.local.cfg files in the test subdirectories.
config.suffixes = ['.bpl']

# excludes: A list of directories to exclude from the testsuite. The 'Inputs'
# subdirectories contain auxiliary inputs for various tests in their parent
# directories.
config.excludes = []

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(os.path.abspath(__file__))

# test_exec_root: The root path where tests should be run.
config.test_exec_root = config.test_source_root

# Propagate 'HOME' through the environment.
if 'HOME' in os.environ:
    config.environment['HOME'] = os.environ['HOME']

# Propagate 'INCLUDE' through the environment.
if 'INCLUDE' in os.environ:
    config.environment['INCLUDE'] = os.environ['INCLUDE']

# Propagate 'LIB' through the environment.
if 'LIB' in os.environ:
    config.environment['LIB'] = os.environ['LIB']

# Propagate the temp directory. Windows requires this because it uses \Windows\
# if none of these are present.
if 'TMP' in os.environ:
    config.environment['TMP'] = os.environ['TMP']
if 'TEMP' in os.environ:
    config.environment['TEMP'] = os.environ['TEMP']

# Propagate PYTHON_EXECUTABLE into the environment
config.environment['PYTHON_EXECUTABLE'] = getattr(config, 'python_executable', '')

# Check that the object root is known.
if config.test_exec_root is None:
    lit_config.fatal('Could not determine execution root for tests!')

### Add Symbooglix specific substitutions

# Find symbooglix
up = os.path.dirname
repositoryRoot = up(
                     up( os.path.abspath(__file__) )
                   )
lit_config.note('Repository root is {}'.format(repositoryRoot))

symbooglixExecutable = os.path.join( repositoryRoot,
                                     'symbooglix',
                                     'symbooglix',
                                     'bin',
                                     'Debug', #FIXME: support release too
                                     'symbooglix.exe'
                                   )

if not os.path.exists(symbooglixExecutable):
    lit_config.fatal('Could not find symbooglix at {}'.format(symbooglixExecutable))

if os.name == 'posix':
    symbooglixExecutable = 'mono --debug ' + symbooglixExecutable

# Allow user to provide extra arguments to symbooglix
symbooglixParams = lit_config.params.get('sb_params','')
if len(symbooglixParams) > 0:
    symbooglixExecutable = symbooglixExecutable + ' ' + symbooglixParams

# Force solver for now, we'll use Z3 since boogie needs it anyway
z3Executable = os.path.join( repositoryRoot,
                             'symbooglix',
                             'symbooglix',
                             'bin',
                             'Debug', #FIXME: support release too
                             'z3.exe'
                           )

if not os.path.exists(z3Executable):
    lit_config.fatal('Could not find Z3 at {}'.format(z3Executable))

symbooglixExecutable += ' --solver Z3 --solver-path {}'.format(z3Executable)

# Inform user what executable is being used
lit_config.note('Using symbooglix: {}\n'.format(symbooglixExecutable))

config.substitutions.append( ('%symbooglix', symbooglixExecutable) )

# Find OutputCheck
OutputCheckTool = os.path.join( repositoryRoot,
                                'utils',
                                'OutputCheck',
                                'bin',
                                'OutputCheck'
                              )
if not os.path.exists(OutputCheckTool):
    lit_config.fatal('Cannot find OutputCheck executable: {OutputCheck}'.format(OutputCheck=OutputCheckTool))

# Add OutputCheck bin directory to PATH (for not utility)
path = os.path.pathsep.join(( os.path.dirname(OutputCheckTool), config.environment['PATH']))
config.environment['PATH'] = path


# Allow user to specify extra flags to OutputCheck (e.g. -l debug)
OutputCheckFlags = lit_config.params.get('outputcheck_params','')
OutputCheckTool += ' -d '
if len(OutputCheckFlags) > 0:
    OutputCheckTool += ' ' + OutputCheckFlags
config.substitutions.append( ('%OutputCheck', OutputCheckTool) )
